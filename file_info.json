{
    "/mnt/c/Users/Elkj\u00f8p Sogn/Documents/Audun/PU Master/DAT250/Projects/demo/gatherBackendInformation.py": {
        "content": "import os\nimport json\n\n# Define the root directory where the script is located\nproject_root = os.path.dirname(os.path.abspath(__file__))\n\n# Define directories to exclude from traversal\nexclude_dirs = ['venv', '__pycache__', 'node_modules', 'frontend']\n\n# Define file types to include\ninclude_extensions = ['.py']\n\n# Helper function to determine if a directory should be excluded\ndef should_exclude_dir(dir_path):\n    return any(exclude_dir in dir_path for exclude_dir in exclude_dirs)\n\n# Helper function to gather useful files\ndef gather_useful_files(root_dir):\n    useful_files = []\n    for dirpath, _, filenames in os.walk(root_dir):\n        if should_exclude_dir(dirpath):\n            continue\n        for filename in filenames:\n            if any(filename.endswith(ext) for ext in include_extensions):\n                file_path = os.path.join(dirpath, filename)\n                useful_files.append(file_path)\n    return useful_files\n\n# Gather useful files\nfiles = gather_useful_files(project_root",
        "size": 1628
    },
    "/mnt/c/Users/Elkj\u00f8p Sogn/Documents/Audun/PU Master/DAT250/Projects/demo/getStructure.py": {
        "content": "import os\n\"\"\"\ndef list_files(startpath='.'):\n    for root, dirs, files in os.walk(startpath):\n        level = root.replace(startpath, '').count(os.sep)\n        indent = ' ' * 4 * (level)\n        print(f'{indent}{os.path.basename(root)}/')\n        subindent = ' ' * 4 * (level + 1)\n        for f in files:\n            print(f'{subindent}{f}')\n\n# Run the function starting from the current directory\nlist_files()\n\"\"\"\n\n\n\ndef list_files(startpath='.'):\n    \"\"\"\n    Lists the directory and file structure starting from startpath.\n    Excludes auto-generated files and directories.\n\n    Args:\n    startpath (str): The root directory to start traversal.\n    \"\"\"\n    # Patterns for auto-generated files and directories to exclude\n    exclude_dirs = {'node_modules', 'build', '.git', '.gradle', '.vscode', 'coverage'}\n    exclude_files = {'package-lock.json', 'yarn.lock'}\n\n    for root, dirs, files in os.walk(startpath):\n        # Check if we are in the 'frontend' directory\n        if 'frontend' in root:\n ",
        "size": 1986
    },
    "/mnt/c/Users/Elkj\u00f8p Sogn/Documents/Audun/PU Master/DAT250/Projects/demo/src/main/java/com/example/pollapp/getAllTextFromClasses.py": {
        "content": "import os\n\ndef get_java_files_content(directory):\n    java_files_content = {}\n    \n    # Traverse through all files in the given directory\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(\".java\"):\n                file_path = os.path.join(root, file)\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    java_files_content[file] = f.read()\n    \n    return java_files_content\n\n# Get the directory where the Python script is located (same as Java files)\ndirectory = os.path.dirname(os.path.abspath(__file__))\n\njava_files_content = get_java_files_content(directory)\n\n# Print all file names and their content\nfor file_name, content in java_files_content.items():\n    print(f\"File: {file_name}\\n\")\n    print(content)\n    print(\"\\n\" + \"-\" * 80 + \"\\n\")\n\n# If you want to save all the content to a single file, uncomment this part:\n# with open(os.path.join(directory, \"all_java_files.txt\"), \"w\", encoding=\"utf-8\") as ou",
        "size": 1244
    }
}